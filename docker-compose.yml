services:
  db:
    image: postgres:15
    container_name: recommendation_db
    restart: always
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: 1234
      POSTGRES_DB: recommendation_system
    ports:
      - "5432:5432"
    tmpfs:
      - /var/lib/postgresql/data

  initializer:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: recommendation_app
    ports:
      - "5000:5000"
    depends_on:
      - db
      - kafka
    env_file:
      - .env
    environment:
      - BOOTSTRAP_SERVERS=kafka:9092
    command: python run.py
    volumes:
      - .:/app
    working_dir: /app

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: recommendation_zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: recommendation_kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
    depends_on:
      - zookeeper

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: recommendation_kafka_ui
    ports:
      - "8080:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    depends_on:
      - kafka
      - zookeeper

  producer-events:
    profiles: ["dummy"]
    build:
      context: .
      dockerfile: Dockerfile
    container_name: recommendation_producer_events
    depends_on:
      - initializer
      - kafka
    environment:
      - TOPIC_NAME=events
      - BOOTSTRAP_SERVERS=kafka:9092
    command: python kafka_app/producer.py
    volumes:
      - .:/app
    working_dir: /app
    
  producer-coupons:
    profiles: ["dummy"]
    build:
      context: .
      dockerfile: Dockerfile
    container_name: recommendation_producer_coupons
    depends_on:
      - initializer
      - kafka
    environment:
      - TOPIC_NAME=coupons
      - BOOTSTRAP_SERVERS=kafka:9092
    command: python kafka_app/producer.py
    volumes:
      - .:/app
    working_dir: /app
    
  producer-users:
    profiles: ["dummy"]
    build:
      context: .
      dockerfile: Dockerfile
    container_name: recommendation_producer_users
    depends_on:
      - initializer
      - kafka
    environment:
      - TOPIC_NAME=users
      - BOOTSTRAP_SERVERS=kafka:9092
    command: python kafka_app/producer.py
    volumes:
      - .:/app
    working_dir: /app

  consumer-events:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: recommendation_consumer_events
    depends_on:
      - initializer
      - kafka
    env_file:
      - .env
    environment:
      - TOPIC_NAME=events
      - BOOTSTRAP_SERVERS=kafka:9092
    command: python kafka_app/consumer.py
    volumes:
      - .:/app
    working_dir: /app
    
  consumer-coupons:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: recommendation_consumer_coupons
    depends_on:
      - initializer
      - kafka
    env_file:
      - .env
    environment:
      - TOPIC_NAME=coupons
      - BOOTSTRAP_SERVERS=kafka:9092
    command: python kafka_app/consumer.py
    volumes:
      - .:/app
    working_dir: /app
    
  consumer-users:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: recommendation_consumer_users
    depends_on:
      - initializer
      - kafka
    env_file:
      - .env
    environment:
      - TOPIC_NAME=users
      - BOOTSTRAP_SERVERS=kafka:9092
    command: python kafka_app/consumer.py
    volumes:
      - .:/app
    working_dir: /app
    
